#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2015 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
import argparse
import logging
import sys

from ovirt_register import register


def set_logger(logfile_path=None):
    """
    Set the logging schema
    """
    if logfile_path is not None:
        logging.basicConfig(
            filename=logfile_path,
            level=logging.DEBUG,
            format='%(asctime)s %(message)s',
            datefmt='%m/%d/%Y %I:%M:%S %p'
        )
        return

    try:
        from systemd import journal
    except ImportError:
        # No systemd, logging into /var/log/messages
        from logging.handlers import SysLogHandler

    log = logging.getLogger()
    log.propagate = False
    log.setLevel(logging.DEBUG)

    try:
        log.addHandler(
            journal.JournalHandler(SYSLOG_IDENTIFIER='ovirt-register')
        )
    except UnboundLocalError:
        syslog = SysLogHandler(address="/dev/log")
        formatter = logging.Formatter("ovirt-register: %(name)s %(levelname)s"
                                      " %(message)s")
        syslog.setFormatter(formatter)
        log.addHandler(syslog)


def main():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        description='Tool to register node to Engine',
        epilog='Example of use:\n%(prog)s '
                    '--engine-fqdn engine.mydomain'
    )

    parser.add_argument(
        '--engine-fqdn',
        help="Engine FQDN (See also: --check-fqdn)",
        required=True
    )

    parser.add_argument(
        '--engine-https-port',
        help="Define engine https port."
             " If not provided, will be used 443",
    )

    parser.add_argument(
        '--node-fqdn',
        help="Node FQDN or address",
    )

    parser.add_argument(
        '--node-name',
        help="Define a node name",
    )

    parser.add_argument(
        '--ssh-user',
        help="SSH username to establish the connection with Engine. "
             "If not provided, the user which is "
             "executing the script will catch and used",
    )

    parser.add_argument(
        '--ssh-port',
        help="SSH port to establish the connection with Engine "
             "If not provided, the script will use the default "
             "SSH port 22"
    )

    parser.add_argument(
        '--check-fqdn',
        help="Disable or Enable FQDN check for Engine CA, this option "
             "is enabled by default (Use: True or False)",
    )

    parser.add_argument(
        '--fingerprint',
        help="Specify an existing fingerprint to be validated against "
             "Engine CA fingerprint",
    )

    parser.add_argument(
        '--log',
        help="Specify a file to redirect the log",
    )

    parser.add_argument(
        '--vdsm-port',
        help="The port to be used in the communication between the "
             "node agent and Engine, if not provided will be used "
             "the default port 54321"
    )
    args = parser.parse_args()

    set_logger(args.log)
    reg = register.Register(engine_fqdn=args.engine_fqdn,
                            engine_https_port=args.engine_https_port,
                            node_fqdn=args.node_fqdn,
                            node_name=args.node_name,
                            ssh_user=args.ssh_user,
                            ssh_port=args.ssh_port,
                            fingerprint=args.fingerprint,
                            vdsm_port=args.vdsm_port,
                            check_fqdn=args.check_fqdn)

    try:
        reg.set_state("get_protocol")
        reg.set_state("get_host_uuid")
        reg.set_state("get_ca")
        reg.set_state("get_ssh")
        reg.set_state("register")
        reg.run()
    except Exception as e:
        reg.logger.exception("Exception: {exp}".format(exp=e))
        raise RuntimeError("Cannot register this host "
                           "into {e}:\n {exc}".format(e=args.engine_fqdn,
                                                      exc=e))

    print(("Registration completed, host is pending approval "
          "on Engine: {e}".format(e=args.engine_fqdn)))

    reg.logger.debug("Registration successfully triggered!")

    return 0

if __name__ == '__main__':
    sys.exit(main())
